@model Customer
<div class="customer-form">
    <h2>Редагування картки клієнта</h2>

    <form asp-controller="Admin" asp-action="EditCustomer">
        <div class="status-select">
            <label asp-for="@Model.Status" style="font-weight:900;">Статус клієнта:</label>
            @Html.DropDownList("Status", (IEnumerable<SelectListItem>)ViewBag.CustomersStatus as IEnumerable<SelectListItem>, new { id = "statusDropdown" , @class = "statusDropdown" })

            <script>
                // Получаем элемент <select>
                var selectElement = document.getElementById('statusDropdown');

                // Функция для обновления фона при загрузке страницы и изменении выбора
                function updateBackground() {
                    var selectedOption = selectElement.options[selectElement.selectedIndex];
                    var optionValue = selectedOption.value;
                    var optionClass = '';

                    // Определите класс в зависимости от значения опции
                    if (optionValue === 'в роботі') {
                        optionClass = 'green-background';
                    } else if (optionValue === 'завершений') {
                        optionClass = 'red-background';
                    }

                    // Примените класс к выбранной опции
                    selectedOption.className = optionClass;

                    // Примените класс к самому <select> для начального состояния
                    selectElement.className = optionClass;
                }

                // Вызываем функцию при загрузке страницы и при изменении выбора
                window.addEventListener('load', updateBackground);
                selectElement.addEventListener('change', updateBackground);

                // Вызываем функцию при загрузке страницы, чтобы установить начальный цвет фона
                updateBackground();
            </script>
        </div>
        <div class="short-inputs">
            <div>
                <span id="nameError" style="color:red;"></span>
                <span asp-validation-for="@Model.Name" style="color:red; font-size:0.9em;"></span>
                <label asp-for="@Model.Name">Ім'я</label>
                <input type="text" asp-for="@Model.Name" id="nameInput" />

            </div>
            <div>
                <label asp-for="@Model.Surname">Прізвище</label>
                <input type="text" asp-for="@Model.Surname" />
            </div>
            <div>
                <label asp-for="@Model.SecondName">По батькові</label>
                <input type="text" asp-for="@Model.SecondName" />
            </div>

            <div>
                <span id="phoneError" style="color:red;"></span>
                <span asp-validation-for="@Model.Phone" style="color:red; font-size:0.9em;"></span>
                <label for="phoneNumberInput">Номер телефона</label>
                <input type="text" asp-for="@Model.Phone" id="phoneNumberInput" data-phone-clear="true" data-phone-pattern="+38 (___) ___ __ __">

            </div>
        </div>

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var nameInput = document.getElementById("nameInput");
                var phoneInput = document.getElementById("phoneNumberInput");
                var nameError = document.getElementById("nameError");
                var phoneError = document.getElementById("phoneError");
                var createButton = document.getElementById("createButton");
                var buttonError = document.getElementById("buttonError");

                function checkForm() {
                    if (nameInput.value !== "" && phoneInput.value !== "") {
                        buttonError.style.display = "none";
                        buttonError.innerText = ""; // Очищаем текст сообщения
                    } else {
                        buttonError.style.display = "block";
                        buttonError.innerText = "заповніть необхідні поля"; // Текст сообщения
                    }
                }

                nameInput.addEventListener("input", checkForm);
                phoneInput.addEventListener("input", checkForm);

                phoneInput.addEventListener("input", function () {
                    if (phoneInput.value === "") {
                        phoneError.style.display = "block";
                        phoneError.innerText = "Будь ласка, введіть номер телефону."; // Текст сообщения
                    } else {
                        phoneError.style.display = "none";
                        phoneError.innerText = ""; // Очищаем текст сообщения
                    }
                });

                nameInput.addEventListener("input", function () {
                    if (nameInput.value === "") {
                        nameError.style.display = "block";
                        nameError.innerText = "Будь ласка, введіть ім'я."; // Текст сообщения
                    } else {
                        nameError.style.display = "none";
                        nameError.innerText = ""; // Очищаем текст сообщения
                    }
                });

                createButton.addEventListener("click", function () {
                    if (nameInput.value !== "" && phoneInput.value !== "") {
                        $('#exampleModal').modal('show');
                    } else {
                        buttonError.style.display = "block";
                        buttonError.innerText = "заповніть необхідні поля";
                        if (nameInput.value === "") {
                            nameError.style.display = "block";
                            nameError.innerText = "Будь ласка, введіть ім'я.";
                        }
                        if (phoneInput.value === "") {
                            phoneError.style.display = "block";
                            phoneError.innerText = "Будь ласка, введіть номер телефону.";
                        }
                    }
                });
            });
        </script>
        <div class="short-inputs">
            <div>
                <label asp-for="@Model.Area">Площа будинку</label>
                <input type="text" asp-for="@Model.Area" />
            </div>
            <div>
                <label for="heatPumpTypeSelect">Тип теплового насосу</label>
                <select id="heatPumpTypeSelect" asp-for="@Model.HeatPumpType">
                    <option value="ґрунт-вода">ґрунт-вода</option>
                    <option value="вода-вода">вода-вода</option>
                </select>
            </div><div>
                <label for="heatPumpSelect">Модель теплового насосу</label>
                <select asp-for="@Model.SelectedHeatPumpId" id="heatPumpSelect">
                    <option value="">Виберіть</option>
                </select>
            </div>
            <div style="justify-content:start">
                <label for="powerDisplay">Потужність:</label>
                <span id="powerDisplay" style="font-size:1.2em; font-weight:700"></span>
            </div>

            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
            <script>
                // Функция для загрузки моделей тепловых насосов на основе выбранного типа
                function loadHeatPumpsByType(type) {
                    var heatPumpSelect = document.getElementById('heatPumpSelect');
                    var powerDisplay = document.getElementById('powerDisplay');

                    // Очистите текущие элементы в списке моделей
                    heatPumpSelect.innerHTML = "";

                    // Добавьте опцию "Виберіть" как первый элемент
                    var chooseOption = document.createElement('option');
                    chooseOption.value = "";
                    chooseOption.textContent = "Виберіть";
                    heatPumpSelect.appendChild(chooseOption);

                    // Очистите поле мощности
                    powerDisplay.textContent = "";

                    if (type) {
                        // Отправьте запрос на сервер для получения моделей тепловых насосов по выбранному типу
                        fetch(`/Admin/GetHeatPumpsByType?type=${type}`)
                            .then(response => response.json())
                            .then(data => {
                                // Добавьте модели тепловых насосов
                                data.forEach(item => {
                                    var option = document.createElement('option');
                                    option.value = item.Id;
                                    option.textContent = item.Name;
                                    heatPumpSelect.appendChild(option);
                                });
                            });
                    }
                }

                // Добавьте обработчик изменения выбора типа теплового насоса
                var heatPumpTypeSelect = document.getElementById('heatPumpTypeSelect');
                heatPumpTypeSelect.addEventListener('change', function () {
                    var selectedType = this.value;
                    loadHeatPumpsByType(selectedType);
                });

                // Добавьте обработчик изменения выбора модели теплового насоса
                var heatPumpSelect = document.getElementById('heatPumpSelect');
                heatPumpSelect.addEventListener('change', function () {
                    var selectedModelId = this.value;
                    if (selectedModelId) {
                        // Отправьте запрос на сервер для получения мощности выбранной модели
                        fetch(`/Admin/GetHeatPumpPower?id=${selectedModelId}`)
                            .then(response => response.json())
                            .then(data => {
                                powerDisplay.textContent = data.power;
                            });
                    }
                });

                // Загрузите модели тепловых насосов при начальной загрузке, если тип уже выбран
                var initialType = heatPumpTypeSelect.value;
                loadHeatPumpsByType(initialType);
            </script>
        </div>
        <div class="short-inputs-date">
            <div>
                <label for="airdatepicker">Дата Продажу</label>
                <input type="text" id="airdatepicker" class="form-control calendar-input" asp-for="@Model.BuyDate" autocomplete="off" readonly style="background-color:white;" />
            </div>
            <div>
                <label for="airdatepicker-2">Дата Mонтажу<br /><span style="font-size:0.8em;">(початок дії гарантії)</span> </label>
                <input type="text" asp-for="@Model.InstallDate" id="airdatepicker-2" class="form-control" autocomplete="off" readonly style="background-color:white;" />
            </div>
        </div>

        <div class="map-api">
            <label for="addressInput">Адреса</label>
            <input type="text" asp-for="@Model.Address" id="addressInput" placeholder="Введіть алресу">
            <div id="map" style="width: 100%; height: 400px;"></div>
        </div>

        <div style="margin-top:30px;">
            <label asp-for="@Model.Comment" style="font-size:1.2em;" ;>Додаткова інформація</label>
            @*<input type="text" asp-for="@Model.Comment" />*@
            <textarea class="textarea-custom" asp-for="@Model.Comment">

            </textarea>
        </div>

        <div class="edit-button  text-center mt-5">
            @*            <button type="button" class="btn btn-success mx-auto text-bold" data-bs-toggle="modal" data-bs-target="#exampleModal" id="createButton">
            Створити нового клієнта
            </button>*@
            <p id="buttonError" style="color:red; margin:auto; margin-bottom:20px;"></p>
            <button type="button" class="btn btn-success mx-auto text-bold" id="createButton" style="margin:auto;">
                Внести зміни
            </button>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Увага</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Ви дійсно хочете зміни до картки даного клієнта?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ні</button>
                        <button type="submit" class="btn btn-success">Так, підтвердити зміни</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>


<link href="~/css/admin/customers_create_edit.css" rel="stylesheet" />
@*Підключення маски для вводу номеру телефона*@
<script src="~/js/phonepattern.js"></script>


@*Запит на підбір мотужності для вибраної моделі теплового насосу*@

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $('#heatPumpSelect').change(function () {
            var selectedHeatPumpId = $(this).val();
            if (selectedHeatPumpId) {
                $.ajax({
                    url: '@Url.Action("GetHeatPumpPower", "Admin")',
                    type: 'POST',
                    dataType: 'json',
                    data: { id: selectedHeatPumpId },
                    success: function (data) {
                        $('#powerDisplay').text(data.power);
                    }
                });
            } else {
                $('#powerDisplay').text('');
            }
        });
    });
</script>


@*Підключення карти*@

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBD3olrWZ-vIqMH3hml6YuVNkiTNdeD4D0&libraries=places&language=uk"></script>

<script>
    var map; // Глобальная переменная для объекта карты
    var marker; // Глобальная переменная для маркера
    var input = document.getElementById('addressInput'); // Получаем поле ввода адреса

    // Инициализируем Places API с ограничением на Украину и отображением карты
    function initialize() {
        var options = {
            types: ['geocode'],
            componentRestrictions: { country: 'UA' },
            language: 'uk'
        };

        var autocomplete = new google.maps.places.Autocomplete(input, options);

        // Создаем карту
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 49.8397, lng: 24.0297 }, // Начальные координаты для Украины
            zoom: 6 // Уровень масштабирования карты
        });

        // Создаем маркер без начального положения
        marker = new google.maps.Marker({
            map: map,
            draggable: true, // Разрешаем передвигать маркер
            anchorPoint: new google.maps.Point(0, -29)
        });

        // Обработчик события выбора адреса из автозаполнения
        autocomplete.addListener('place_changed', function () {
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                //window.alert('Нет информации о выбранном месте.');
                return;
            }

            // Если место имеет геометрию, отобразим его на карте
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17); // Устанавливаем уровень масштабирования для одного маркера
            }

            marker.setPosition(place.geometry.location);
            marker.setVisible(true);
            input.value = place.formatted_address; // Обновляем поле ввода адреса
        });

        // Обработчик события передвижения маркера
        marker.addListener('dragend', function () {
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'location': marker.getPosition() }, function (results, status) {
                if (status === 'OK' && results[0]) {
                    input.value = results[0].formatted_address; // Обновляем поле ввода адреса
                } else {
                    window.alert('Не вийшло визначити адресу.');
                }
            });
        });

        // Получите адрес из поля ввода и установите маркер и центр карты
        var initialAddress = input.value;
        if (initialAddress) {
            geocodeAddress(initialAddress);
        }
    }

    // Вызываем функцию инициализации после загрузки карты
    google.maps.event.addDomListener(window, 'load', initialize);

    // Функция для геокодирования адреса и установки маркера и центра карты
    function geocodeAddress(address) {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === 'OK' && results[0]) {
                var location = results[0].geometry.location;
                map.setCenter(location);
                map.setZoom(17);
                marker.setPosition(location);
                marker.setVisible(true);
            } else {
                window.alert('Не вийшло визначити адресу.');
            }
        });
    }
</script>



@*Підключення календарю*@

<link href="~/css/airdatepicker/airdatepicker.css" rel="stylesheet" />
<script src="~/js/airdatepicker/airdatepicker.js"></script>
<script>
    new AirDatepicker('#airdatepicker', {
        autoClose: true,
        locale: {
            days: ['Неділя', 'Понеділок', 'Вівторок', 'Середа', 'Четвер', 'П’ятниця', 'Субота'],
            daysShort: ['Нед', 'Пнд', 'Вів', 'Срд', 'Чтв', 'Птн', 'Сбт'],
            daysMin: ['Нд', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
            months: ['Січень', 'Лютий', 'Березень', 'Квітень', 'Травень', 'Червень', 'Липень', 'Серпень', 'Вересень', 'Жовтень', 'Листопад', 'Грудень'],
            monthsShort: ['Січ', 'Лют', 'Бер', 'Кві', 'Тра', 'Чер', 'Лип', 'Сер', 'Вер', 'Жов', 'Лис', 'Гру'],
            today: 'Сьогодні',
            clear: 'Очистити',
            dateFormat: 'dd.MM.yyyy',
            timeFormat: 'HH:mm',
            firstDay: 1
        }
    });
    new AirDatepicker('#airdatepicker-2', {
        autoClose: true,
        locale: {
            days: ['Неділя', 'Понеділок', 'Вівторок', 'Середа', 'Четвер', 'П’ятниця', 'Субота'],
            daysShort: ['Нед', 'Пнд', 'Вів', 'Срд', 'Чтв', 'Птн', 'Сбт'],
            daysMin: ['Нд', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
            months: ['Січень', 'Лютий', 'Березень', 'Квітень', 'Травень', 'Червень', 'Липень', 'Серпень', 'Вересень', 'Жовтень', 'Листопад', 'Грудень'],
            monthsShort: ['Січ', 'Лют', 'Бер', 'Кві', 'Тра', 'Чер', 'Лип', 'Сер', 'Вер', 'Жов', 'Лис', 'Гру'],
            today: 'Сьогодні',
            clear: 'Очистити',
            dateFormat: 'dd.MM.yyyy',
            timeFormat: 'HH:mm',
            firstDay: 1
        }
    });
</script>

@*Підключення textarea в стилі ворду*@
<script src="https://cdn.tiny.cloud/1/v9f8cw0nhckpccm80e3f7oudgiat5v96g6m2xgngrh0htbk5/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
<script>
    tinymce.init({
        selector: 'textarea',
        plugins: 'anchor autolink charmap codesample emoticons  lists   table visualblocks wordcount',
        toolbar: ' blocks fontfamily fontsize | bold italic underline |  align lineheight | numlist bullist indent outdent  ',
    });
</script>
